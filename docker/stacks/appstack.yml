version: "3.9"


volumes:
  gi_modules:
    driver: local-persist
    driver_opts:
      mountpoint: ${MOUNTPOINT:-/home/administrator/app.xdesk}/gi_modules
  gi_modules_compiled:
    driver: local-persist
    driver_opts:
      mountpoint: ${MOUNTPOINT:-/home/administrator/app.xdesk}/gi_modules/_compiled
  gi_modules_broadway-proxy_src:
    driver: local-persist
    driver_opts:
      mountpoint: ${MOUNTPOINT:-/home/administrator/app.xdesk}/gi_modules/broadway-proxy/src
  gi_modules_broadway-proxy_views:
    driver: local-persist
    driver_opts:
      mountpoint: ${MOUNTPOINT:-/home/administrator/app.xdesk}/gi_modules/broadway-proxy/views
  frontend:
    driver: local-persist
    driver_opts:
      mountpoint: ${MOUNTPOINT:-/home/administrator/app.xdesk}/gi_modules/frontend
  frontend_server:
    driver: local-persist
    driver_opts:
      mountpoint: ${MOUNTPOINT:-/home/administrator/app.xdesk}/frontend/server
  frontend_remix_build:
    driver: local-persist
    driver_opts:
      mountpoint: ${MOUNTPOINT:-/home/administrator/app.xdesk}/frontend/remix/build



networks:
  traefik-net:
    external: true
  socket-proxy:
    external: true



services:
  gi:
    image: bresnow/amnion-gjsx:${VERSION:-latest}
    volumes:
      - gi_modules_compiled:/amnion-gjsx/gi_modules/_compiled
      - gi_modules_broadway-proxy_src:/amnion-gjsx/gi_modules/broadway-proxy/src
      - gi_modules_broadway-proxy_views:/amnion-gjsx/gi_modules/broadway-proxy/views
    networks:
      - traefik-net
      - socket-proxy
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-net
        - traefik.constraint-label=traefik-net
        - traefik.http.routers.gjsx-${ID:-xdesk_dev}.rule=Host(`${INTERFACE_DOMAIN:-namespace.cnxt.dev}`)
        - traefik.http.routers.gjsx-${ID:-xdesk_dev}.entrypoints=http,https
        - traefik.http.routers.gjsx-${ID:-xdesk_dev}.service=gjsx-${ID:-xdesk_dev}
        - traefik.http.routers.gjsx-${ID:-xdesk_dev}.tls=true
        - traefik.http.routers.gjsx-${ID:-xdesk_dev}.tls.certresolver=${TLS:-letsencrypt}
        - traefik.http.services.gjsx-${ID:-xdesk_dev}.loadbalancer.server.port=8086
        - traefik.http.routers.internal_socket-${ID:-xdesk_dev}.rule=Host(`${PEER_SOCKET_DOMAIN:-peer-internal.cnxt.dev}`)
        - traefik.http.routers.internal_socket-${ID:-xdesk_dev}.entrypoints=http,https
        - traefik.http.routers.internal_socket-${ID:-xdesk_dev}.service=internal_socket-${ID:-xdesk_dev}
        - traefik.http.routers.internal_socket-${ID:-xdesk_dev}.tls=true
        - traefik.http.routers.internal_socket-${ID:-xdesk_dev}.tls.certresolver=${TLS:-letsencrypt}
        - traefik.http.services.internal_socket-${ID:-xdesk_dev}.loadbalancer.server.port=${PEER_SOCKET_PORT:-8088}
    environment:
      C99_API_KEY: ${C99_API_KEY}
      SERVICE_NAME: "{{.Service.Name}}"
      PEER_SOCKET_DOMAIN: ${PEER_SOCKET_DOMAIN:-peer-internal.cnxt.dev}
      INTERFACE_DOMAIN: ${INTERFACE_DOMAIN:-namespace.cnxt.dev}
  gi_dev:
    image: bresnow/amnion-gjsx_dev:${VERSION:-latest}
    volumes:
      - gi_modules:/amnion-gjsx/gi_modules
    networks:
      - traefik-net
      - socket-proxy
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-net
        - traefik.constraint-label=traefik-net
        - traefik.http.routers.gjsx-${ID:-xdesk_dev}.rule=Host(`${INTERFACE_DOMAIN:-namespace.cnxt.dev}`)
        - traefik.http.routers.gjsx-${ID:-xdesk_dev}.entrypoints=http,https
        - traefik.http.routers.gjsx-${ID:-xdesk_dev}.service=gjsx-${ID:-xdesk_dev}
        - traefik.http.routers.gjsx-${ID:-xdesk_dev}.tls=true
        - traefik.http.routers.gjsx-${ID:-xdesk_dev}.tls.certresolver=${TLS:-letsencrypt}
        - traefik.http.services.gjsx-${ID:-xdesk_dev}.loadbalancer.server.port=8086
        - traefik.http.routers.internal_socket-${ID:-xdesk_dev}.rule=Host(`${PEER_SOCKET_DOMAIN:-peer-internal.cnxt.dev}`)
        - traefik.http.routers.internal_socket-${ID:-xdesk_dev}.entrypoints=http,https
        - traefik.http.routers.internal_socket-${ID:-xdesk_dev}.service=internal_socket-${ID:-xdesk_dev}
        - traefik.http.routers.internal_socket-${ID:-xdesk_dev}.tls=true
        - traefik.http.routers.internal_socket-${ID:-xdesk_dev}.tls.certresolver=${TLS:-letsencrypt}
        - traefik.http.services.internal_socket-${ID:-xdesk_dev}.loadbalancer.server.port=${PEER_SOCKET_PORT:-8088}
    environment:
      C99_API_KEY: ${C99_API_KEY}
      SERVICE_NAME: "{{.Service.Name}}"
      PEER_SOCKET_DOMAIN: ${PEER_SOCKET_DOMAIN:-peer-internal.cnxt.dev}
      INTERFACE_DOMAIN: ${INTERFACE_DOMAIN:-namespace.cnxt.dev}

  front_dev:
    image: bresnow/amnion-frontend_dev:${VERSION:-latest}
    volumes:
      - frontend:/amnion/frontend
    networks:
      - traefik-net
      - socket-proxy
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-net
        - traefik.constraint-label=traefik-net
        - traefik.http.routers.proxy-${ID:-xdesk_dev}.rule=Host(`${DOMAIN:-cnxt.dev}`)
        - traefik.http.routers.proxy-${ID:-xdesk_dev}.entrypoints=http,https
        - traefik.http.routers.proxy-${ID:-xdesk_dev}.service=proxy-${ID:-xdesk_dev}
        - traefik.http.routers.proxy-${ID:-xdesk_dev}.tls=true
        - traefik.http.routers.proxy-${ID:-xdesk_dev}.tls.certresolver=${TLS:-letsencrypt}
        - traefik.http.services.proxy-${ID:-xdesk_dev}.loadbalancer.server.port=${FRONTEND_PORT:-3333}
    environment:
      C99_API_KEY: ${C99_API_KEY}
      SERVICE_NAME: "{{.Service.Name}}"
      PEER_SOCKET_DOMAIN: ${PEER_SOCKET_DOMAIN:-peer-internal.cnxt.dev}
      DOMAIN: ${DOMAIN:-cnxt.dev}
      INTERFACE_DOMAIN: ${INTERFACE_DOMAIN:-namespace.cnxt.dev}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_CONNECT_CLIENT_ID: ${STRIPE_CONNECT_CLIENT_ID}
      ISSUER_ID: ${ISSUER_ID}
      ISSUER_SEED: ${ISSUER_SEED}
      HORIZON_URL: ${HORIZON_URL:-https://horizon-testnet.cnxt.dev}
      NETWORK_PASSPHRASE: ${NETWORK_PASSPHRASE:-Test SDF Network ; September 2015}
      WITHDRAW_ENDPOINT: ${WITHDRAW_ENDPOINT:-http://0.0.0.0:3333/api/withdraw}


  front:
    image: bresnow/amnion-frontend:${VERSION:-latest}
    volumes:
      - frontend_server:/amnion/frontend/server
      - frontend_remix_build:/amnion/frontend/remix/build
    networks:
      - traefik-net
      - socket-proxy
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-net
        - traefik.constraint-label=traefik-net
        - traefik.http.routers.proxy-${ID:-xdesk_dev}.rule=Host(`${DOMAIN:-cnxt.dev}`)
        - traefik.http.routers.proxy-${ID:-xdesk_dev}.entrypoints=http,https
        - traefik.http.routers.proxy-${ID:-xdesk_dev}.service=proxy-${ID:-xdesk_dev}
        - traefik.http.routers.proxy-${ID:-xdesk_dev}.tls=true
        - traefik.http.routers.proxy-${ID:-xdesk_dev}.tls.certresolver=${TLS:-letsencrypt}
        - traefik.http.services.proxy-${ID:-xdesk_dev}.loadbalancer.server.port=${FRONTEND_PORT:-3333}
    environment:
      C99_API_KEY: ${C99_API_KEY}
      SERVICE_NAME: "{{.Service.Name}}"
      PEER_SOCKET_DOMAIN: ${PEER_SOCKET_DOMAIN:-peer-internal.cnxt.dev}
      DOMAIN: ${DOMAIN:-cnxt.dev}
      INTERFACE_DOMAIN: ${INTERFACE_DOMAIN:-namespace.cnxt.dev}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_CONNECT_CLIENT_ID: ${STRIPE_CONNECT_CLIENT_ID}
      ISSUER_ID: ${ISSUER_ID}
      ISSUER_SEED: ${ISSUER_SEED}
      HORIZON_URL: ${HORIZON_URL:-https://horizon-testnet.cnxt.dev}
      NETWORK_PASSPHRASE: ${NETWORK_PASSPHRASE:-Test SDF Network ; September 2015}
      WITHDRAW_ENDPOINT: ${WITHDRAW_ENDPOINT:-http://0.0.0.0:3333/api/withdraw}


